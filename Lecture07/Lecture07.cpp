#include <stdio.h>

int main()
{
    /*
      2차원 배열 선언
      - int number[16][8];
        => "행" 16개, 각 행마다 "열" 8개(int 8개)로 구성된 2차원 배열
        => C의 2차원 배열은 '행 우선(row-major)' 메모리 배치
           즉, number[0][0..7] 이 먼저 연속으로 있고,
                다음에 number[1][0..7], ...
                마지막에 number[15][0..7] 이 이어짐

        타입 관점:
          number          : int [16][8]
          number[j]       : int [8]          (j번째 행, 길이 8짜리 1차원 배열)
          number[j] (decay): int*            (j번째 행의 첫 원소를 가리키는 포인터)
          number[j][i]    : int              (j행 i열 원소)

        주소식(행우선 배치):
          &number[j][i] == &number[0][0] + (j * 8) + i
    */
    int number[16][8];  // 0: ' ' (공백), 1: '@' 라는 주석은 예시였던 듯. 여기선 int 값 저장.

    int i = 0;

    /*
      바깥 for: i = 열 인덱스(0~7)
      안쪽 for: j = 행 인덱스(0~15)

      주의: 일반적으로 2차원 배열을 출력할 때는
            "행 기준 바깥, 열 기준 안쪽"으로 도는 경우가 많다.
            여기 코드는 그 반대로 "열을 바깥, 행을 안쪽"으로 순회하며
            즉, 각 줄마다 '같은 열 i'에 대한 모든 행 j의 값을 출력한다.
    */
    for (i = 0; i < 8; i = i + 1) // 열 i
    {
        int j = 0;
        for (j = 0; j < 16; j++)  // 행 j
        {
            /*
              값 대입 규칙:
                number[j][i] = i * 2 + j;

              해석:
                - 같은 열 i 안에서는 j가 0~15로 증가할 때 값이 1씩 증가
                - 열이 1 증가(i -> i+1)하면 전체 값이 2씩 커진 패턴 형성
            */
            number[j][i] = i * 2 + j;

            // 현재 채운 값을 즉시 출력 (행 인덱스 j가 빠르게 변하므로, '열 고정/행 순회' 형태로 보임)
            printf("%d ", number[j][i]);
        }
        printf("\n"); // 열 i 하나를 마치면 줄바꿈
    }

    /*
      포인터 산술 실습 포인트
      ------------------------
      표현식: *(number[15] + 1)

      - number[15] 는 "15번째 행 전체" (타입: int[8])
      - 식에서 number[15] 는 포인터로 decay 하여 "int*" 가 된다
        즉, &number[15][0] 와 동일한 주소

      - (number[15] + 1)
        => (&number[15][0] + 1)
        => number[15] 행에서 '다음 열(인덱스 1)'의 주소

      - *(number[15] + 1)
        => number[15][1] 과 완전히 동일

      우리가 위에서 채운 값 공식으로 보면:
        number[j][i] = i*2 + j
        여기서 j = 15, i = 1 이므로 값 = 1*2 + 15 = 17
    */
    printf("%d", *(number[15] + 1)); // 출력 예상: 17

    printf("%d", *(number[15]+1));
}
